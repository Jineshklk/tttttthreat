Id,Title,Category,Diagram,Interaction,Priority,State,Changed By,Description,Justification,Last Modified,Possible Mitigation(s),SDL Phase
105,An adversary may leverage the lack of monitoring systems and trigger anomalous traffic to database,Tampering,Diagram 1,Write Updated Data,High,Not Started,,An adversary may leverage the lack of intrusion detection and prevention  of anomalous database activities and  trigger anomalous traffic to database,,Generated,"Enable Threat detection on Azure SQL database. Refer: <a href=""https://aka.ms/tmtauditlog#threat-detection"">https://aka.ms/tmtauditlog#threat-detection</a>",Design
104,An adversary can tamper critical database securables and deny the action,Tampering,Diagram 1,Write Updated Data,High,Not Started,,An adversary can tamper critical database securables and deny the action,,Generated,"Add digital signature to critical database securables. Refer: <a href=""https://aka.ms/tmtcrypto#securables-db"">https://aka.ms/tmtcrypto#securables-db</a>",Design
103,An adversary can deny actions on database due to lack of auditing,Repudiation,Diagram 1,Write Updated Data,Medium,Not Started,,"Proper logging of all security events and user actions builds traceability in a system and denies any possible repudiation issues. In the absence of proper auditing and logging controls, it would become impossible to implement any accountability in a system.",,Generated,"Ensure that login auditing is enabled on SQL Server. Refer: <a href=""https://aka.ms/tmtauditlog#identify-sensitive-entities"">https://aka.ms/tmtauditlog#identify-sensitive-entities</a>",Implementation
102,An adversary can gain access to sensitive data by performing SQL injection,Information Disclosure,Diagram 1,Write Updated Data,High,Not Started,,"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. The primary form of SQL injection consists of direct insertion of code into user-input variables that are concatenated with SQL commands and executed. A less direct attack injects malicious code into strings that are destined for storage in a table or as metadata. When the stored strings are subsequently concatenated into a dynamic SQL command, the malicious code is executed. ",,Generated,"Ensure that login auditing is enabled on SQL Server. Refer: <a href=""https://aka.ms/tmtauditlog#identify-sensitive-entities"">https://aka.ms/tmtauditlog#identify-sensitive-entities</a>  Ensure that least-privileged accounts are used to connect to Database server. Refer: <a href=""https://aka.ms/tmtauthz#privileged-server"">https://aka.ms/tmtauthz#privileged-server</a>  Enable Threat detection on Azure SQL database. Refer: <a href=""https://aka.ms/tmtauditlog#threat-detection"">https://aka.ms/tmtauditlog#threat-detection</a>  Do not use dynamic queries in stored procedures. Refer: <a href=""https://aka.ms/tmtinputval#stored-proc"">https://aka.ms/tmtinputval#stored-proc</a>",Implementation
101,An adversary can gain access to sensitive PII or HBI data in database,Information Disclosure,Diagram 1,Write Updated Data,High,Not Started,,"Additional controls like Transparent Data Encryption, Column Level Encryption, EKM etc. provide additional protection mechanism to high value PII or HBI data. ",,Generated,"Use strong encryption algorithms to encrypt data in the database. Refer: <a href=""https://aka.ms/tmtcrypto#strong-db"">https://aka.ms/tmtcrypto#strong-db</a>  Ensure that sensitive data in database columns is encrypted. Refer: <a href=""https://aka.ms/tmtdata#db-encrypted"">https://aka.ms/tmtdata#db-encrypted</a>  Ensure that database-level encryption (TDE) is enabled. Refer: <a href=""https://aka.ms/tmtdata#tde-enabled"">https://aka.ms/tmtdata#tde-enabled</a>  Ensure that database backups are encrypted. Refer: <a href=""https://aka.ms/tmtdata#backup"">https://aka.ms/tmtdata#backup</a>  Use SQL server EKM to protect encryption keys. Refer: <a href=""https://aka.ms/tmtcrypto#ekm-keys"">https://aka.ms/tmtcrypto#ekm-keys</a>  Use AlwaysEncrypted feature if encryption keys should not be revealed to Database engine. Refer: <a href=""https://aka.ms/tmtcrypto#keys-engine"">https://aka.ms/tmtcrypto#keys-engine</a>",Implementation
100,An adversary can gain unauthorized access to database due to loose authorization rules,Elevation of Privileges,Diagram 1,Write Updated Data,High,Not Started,,"Database access should be configured with roles and privilege based on least privilege and need to know principle. ",,Generated,"Ensure that least-privileged accounts are used to connect to Database server. Refer: <a href=""https://aka.ms/tmtauthz#privileged-server"">https://aka.ms/tmtauthz#privileged-server</a>  Implement Row Level Security RLS to prevent tenants from accessing each others data. Refer: <a href=""https://aka.ms/tmtauthz#rls-tenants"">https://aka.ms/tmtauthz#rls-tenants</a>  Sysadmin role should only have valid necessary users . Refer: <a href=""https://aka.ms/tmtauthz#sysadmin-users"">https://aka.ms/tmtauthz#sysadmin-users</a>",Implementation
99,An adversary can gain unauthorized access to database due to lack of network access protection,Elevation of Privileges,Diagram 1,Write Updated Data,High,Not Started,,"If there is no restriction at network or host firewall level, to access the database then anyone can attempt to connect to the database from an unauthorized location",,Generated,"Configure a Windows Firewall for Database Engine Access. Refer: <a href=""https://aka.ms/tmtconfigmgmt#firewall-db"">https://aka.ms/tmtconfigmgmt#firewall-db</a>",Implementation
98,An adversary may be able to perform action(s) on behalf of another user due to lack of controls against cross domain requests,Spoofing,Diagram 1,Update Marks,High,Not Started,,An adversary may be able to perform action(s) on behalf of another user due to lack of controls against cross domain requests,,Generated,"Ensure that authenticated pages incorporate UI Redressing or clickjacking defences. Refer: <a href=""https://aka.ms/tmt-th177a"">https://aka.ms/tmt-th177a</a>. Mitigate against Cross-Site Request Forgery (CSRF) attacks. Refer: <a href=""https://aka.ms/tmt-th177b"">https://aka.ms/tmt-th177b</a> and <a href=""https://aka.ms/tmt-th177c"">https://aka.ms/tmt-th177c</a>",Implementation
97,An adversary may perform action(s) on behalf of another user due to lack of controls against cross domain requests,Elevation of Privileges,Diagram 1,Update Marks,High,Not Started,,An adversary may perform action(s) on behalf of another user due to lack of controls against cross domain requests,,Generated,"Ensure that only trusted origins are allowed if CORS is being used. Refer: <a href=""https://aka.ms/tmt-th176"">https://aka.ms/tmt-th176</a>",Implementation
96,An adversary can read sensitive data by sniffing or intercepting traffic to Marks Mgmt Module,Tampering,Diagram 1,Update Marks,High,Not Started,,An adversary can read sensitive data by sniffing or intercepting traffic to Marks Mgmt Module,,Generated,"Configure SSL certificate for custom domain in Azure App Service. Force all HTTP traffic to the app service to be over HTTPS by enabling the HTTPS only option on the instance. Refer: <a href=""https://aka.ms/tmt-th175a"">https://aka.ms/tmt-th175a</a> and <a href=""https://aka.ms/tmt-th175b"">https://aka.ms/tmt-th175b</a>. Enable HTTP Strict Transport Security (HSTS). Refer: <a href=""https://aka.ms/tmt-th175c"">https://aka.ms/tmt-th175c</a>",Implementation
95,An adversary can fingerprint an Azure web application or API by leveraging server header information,Information Disclosure,Diagram 1,Update Marks,Medium,Not Started,,An adversary can fingerprint an Azure web application or API by leveraging server header information,,Generated,"Remove standard server headers to avoid fingerprinting. Refer: <a href=""https://aka.ms/tmt-th174a"">https://aka.ms/tmt-th174a</a> and <a href=""https://aka.ms/tmt-th174b"">https://aka.ms/tmt-th174b</a>",Implementation
94,"An adversary can deny performing actions against Marks Mgmt Module due to lack of auditing, leading to repudiation issues",Repudiation,Diagram 1,Update Marks,Medium,Not Started,,"An adversary can deny performing actions against Marks Mgmt Module due to lack of auditing, leading to repudiation issues",,Generated,"Implement application level auditing and logging, especially for sensitive operations, like accessing secrets from secrets storage solutions. Other examples include user management events like successful and failed user logins, password resets, password changes, account lockouts and user registrations.",Implementation
93,Attacker can steal user session cookies due to insecure cookie attributes,Information Disclosure,Diagram 1,Update Marks,High,Not Started,,Attacker can steal user session cookies due to insecure cookie attributes,,Generated,"Applications available over HTTPS must use secure cookies. Refer: <a href=""https://aka.ms/tmt-th170a"">https://aka.ms/tmt-th170a</a>. All HTTP based applications should specify http only for cookie definition. Refer: <a href=""https://aka.ms/tmt-th170b"">https://aka.ms/tmt-th170b</a> and <a href=""https://aka.ms/tmt-th170c"">https://aka.ms/tmt-th170c</a>",Implementation
92,An adversary may gain unauthorized access to Marks Mgmt Module due to weak network configuration,Elevation of Privileges,Diagram 1,Update Marks,High,Not Started,,An adversary may gain unauthorized access to Marks Mgmt Module due to weak network configuration,,Generated,"Restrict access to Azure App Service to selected networks (e.g. IP whitelisting, VNET integrations). Refer: <a href=""https://aka.ms/tmt-th167"">https://aka.ms/tmt-th167</a>",Implementation
91,An adversary may gain long term persistent access to related resources through the compromise of an application identity,Elevation of Privileges,Diagram 1,Update Marks,High,Not Started,,An adversary may gain long term persistent access to related resources through the compromise of an application identity,,Generated,"Store secrets in secret storage solutions where possible, and rotate secrets on a regular cadence. Use Managed Service Identity to create a managed app identity on Azure Active Directory and use it to access AAD-protected resources. Refer: <a href=""https://aka.ms/tmt-th166"">https://aka.ms/tmt-th166</a>",Implementation
90,An adversary may block access to the application or API hosted on Marks Mgmt Module through a denial of service attack,Denial of Service,Diagram 1,Update Marks,High,Not Started,,An adversary may block access to the application or API hosted on Marks Mgmt Module through a denial of service attack,,Generated,"Network level denial of service mitigations are automatically enabled as part of the Azure platform (Basic Azure DDoS Protection). Refer: <a href=""https://aka.ms/tmt-th165a"">https://aka.ms/tmt-th165a</a>. Implement application level throttling (e.g. per-user, per-session, per-API) to maintain service availability and protect against DoS attacks. Leverage Azure API Management for managing and protecting APIs. Refer: <a href=""https://aka.ms/tmt-th165b"">https://aka.ms/tmt-th165b</a>. General throttling guidance, refer: <a href=""https://aka.ms/tmt-th165c"">https://aka.ms/tmt-th165c</a> ",Implementation
89,An adversary can gain access to sensitive data stored in Web App's config files,Tampering,Diagram 1,Retrieve Student Info,High,Not Started,,"An adversary can gain access to the config files. and if sensitive data is stored in it, it would be compromised.",,Generated,"Encrypt sections of Web App's configuration files that contain sensitive data. Refer: <a href=""https://aka.ms/tmtdata#encrypt-data"">https://aka.ms/tmtdata#encrypt-data</a>",Implementation
88,An adversary can gain access to sensitive data by performing SQL injection through Web App,Tampering,Diagram 1,Retrieve Student Info,High,Not Started,,"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. The primary form of SQL injection consists of direct insertion of code into user-input variables that are concatenated with SQL commands and executed. A less direct attack injects malicious code into strings that are destined for storage in a table or as metadata. When the stored strings are subsequently concatenated into a dynamic SQL command, the malicious code is executed. ",,Generated,"Ensure that type-safe parameters are used in Web Application for data access. Refer: <a href=""https://aka.ms/tmtinputval#typesafe"">https://aka.ms/tmtinputval#typesafe</a>",Implementation
87,An adversary may spoof StudentDB  and gain access to Web Application,Spoofing,Diagram 1,Retrieve Student Info,High,Not Started,,"If proper authentication is not in place, an adversary can spoof a source process or external entity and gain unauthorized access to the Web Application",,Generated,"Consider using a standard authentication mechanism to authenticate to Web Application. Refer: <a href=""https://aka.ms/tmtauthn#standard-authn-web-app"">https://aka.ms/tmtauthn#standard-authn-web-app</a>",Design
86,An adversary can create a fake website and launch phishing attacks,Spoofing,Diagram 1,Retrieve Student Info,High,Not Started,,"Phishing is attempted to obtain sensitive information such as usernames, passwords, and credit card details (and sometimes, indirectly, money), often for malicious reasons, by masquerading as a Web Server which is a trustworthy entity in electronic communication",,Generated,"Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>  Ensure that authenticated ASP.NET pages incorporate UI Redressing or clickjacking defences. Refer: <a href=""https://aka.ms/tmtconfigmgmt#ui-defenses"">https://aka.ms/tmtconfigmgmt#ui-defenses</a>  Validate all redirects within the application are closed or done safely. Refer: <a href=""https://aka.ms/tmtinputval#redirect-safe"">https://aka.ms/tmtinputval#redirect-safe</a>",Implementation
85,An adversary can steal sensitive data like user credentials,Spoofing,Diagram 1,Retrieve Student Info,High,Not Started,,"Attackers can exploit weaknesses in system to steal user credentials. Downstream and upstream components are often accessed by using credentials stored in configuration stores. Attackers may steal the upstream or downstream component credentials. Attackers may steal credentials if, Credentials are stored and sent in clear text, Weak input validation coupled with dynamic sql queries, Password retrieval mechanism are poor,  ",,Generated,"Explicitly disable the autocomplete HTML attribute in sensitive forms and inputs. Refer: <a href=""https://aka.ms/tmtdata#autocomplete-input"">https://aka.ms/tmtdata#autocomplete-input</a>  Perform input validation and filtering on all string type Model properties. Refer: <a href=""https://aka.ms/tmtinputval#typemodel"">https://aka.ms/tmtinputval#typemodel</a>  Validate all redirects within the application are closed or done safely. Refer: <a href=""https://aka.ms/tmtinputval#redirect-safe"">https://aka.ms/tmtinputval#redirect-safe</a>  Enable step up or adaptive authentication. Refer: <a href=""https://aka.ms/tmtauthn#step-up-adaptive-authn"">https://aka.ms/tmtauthn#step-up-adaptive-authn</a>  Implement forgot password functionalities securely. Refer: <a href=""https://aka.ms/tmtauthn#forgot-pword-fxn"">https://aka.ms/tmtauthn#forgot-pword-fxn</a>  Ensure that password and account policy are implemented. Refer: <a href=""https://aka.ms/tmtauthn#pword-account-policy"">https://aka.ms/tmtauthn#pword-account-policy</a>  Implement input validation on all string type parameters accepted by Controller methods. Refer: <a href=""https://aka.ms/tmtinputval#string-method"">https://aka.ms/tmtinputval#string-method</a>",Implementation
84,An adversary can spoof the target web application due to insecure TLS certificate configuration,Spoofing,Diagram 1,Retrieve Student Info,High,Not Started,,Ensure that TLS certificate parameters are configured with correct values,,Generated,"Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>",Implementation
83,Attacker can deny the malicious act and remove the attack foot prints leading to repudiation issues,Repudiation,Diagram 1,Retrieve Student Info,Medium,Not Started,,"Proper logging of all security events and user actions builds traceability in a system and denies any possible repudiation issues. In the absence of proper auditing and logging controls, it would become impossible to implement any accountability in a system",,Generated,"Ensure that auditing and logging is enforced on the application. Refer: <a href=""https://aka.ms/tmtauditlog#auditing"">https://aka.ms/tmtauditlog#auditing</a>  Ensure that log rotation and separation are in place. Refer: <a href=""https://aka.ms/tmtauditlog#log-rotation"">https://aka.ms/tmtauditlog#log-rotation</a>  Ensure that Audit and Log Files have Restricted Access. Refer: <a href=""https://aka.ms/tmtauditlog#log-restricted-access"">https://aka.ms/tmtauditlog#log-restricted-access</a>  Ensure that User Management Events are Logged. Refer: <a href=""https://aka.ms/tmtauditlog#user-management"">https://aka.ms/tmtauditlog#user-management</a>",Implementation
82,An adversary can gain access to sensitive information through error messages,Information Disclosure,Diagram 1,Retrieve Student Info,High,Not Started,,"An adversary can gain access to sensitive data such as the following, through verbose error messages - Server names  - Connection strings  - Usernames  - Passwords  - SQL procedures  - Details of dynamic SQL failures  - Stack trace and lines of code  - Variables stored in memory  - Drive and folder locations  - Application install points  - Host configuration settings  - Other internal application details ",,Generated,"Do not expose security details in error messages. Refer: <a href=""https://aka.ms/tmtxmgmt#messages"">https://aka.ms/tmtxmgmt#messages</a>  Implement Default error handling page. Refer: <a href=""https://aka.ms/tmtxmgmt#default"">https://aka.ms/tmtxmgmt#default</a>  Set Deployment Method to Retail in IIS. Refer: <a href=""https://aka.ms/tmtxmgmt#deployment"">https://aka.ms/tmtxmgmt#deployment</a>  Exceptions should fail safely. Refer: <a href=""https://aka.ms/tmtxmgmt#fail"">https://aka.ms/tmtxmgmt#fail</a>  ASP.NET applications must disable tracing and debugging prior to deployment. Refer: <a href=""https://aka.ms/tmtconfigmgmt#trace-deploy"">https://aka.ms/tmtconfigmgmt#trace-deploy</a>  Implement controls to prevent username enumeration. Refer: <a href=""https://aka.ms/tmtauthn#controls-username-enum"">https://aka.ms/tmtauthn#controls-username-enum</a>",Implementation
81,An adversary may gain access to sensitive data from log files,Information Disclosure,Diagram 1,Retrieve Student Info,High,Not Started,,An adversary may gain access to sensitive data from log files,,Generated,"Ensure that the application does not log sensitive user data. Refer: <a href=""https://aka.ms/tmtauditlog#log-sensitive-data"">https://aka.ms/tmtauditlog#log-sensitive-data</a>  Ensure that Audit and Log Files have Restricted Access. Refer: <a href=""https://aka.ms/tmtauditlog#log-restricted-access"">https://aka.ms/tmtauditlog#log-restricted-access</a>",Implementation
80,An adversary can reverse weakly encrypted or hashed content,Information Disclosure,Diagram 1,Retrieve Student Info,High,Not Started,,An adversary can reverse weakly encrypted or hashed content,,Generated,"Do not expose security details in error messages. Refer: <a href=""https://aka.ms/tmtxmgmt#messages"">https://aka.ms/tmtxmgmt#messages</a> Implement Default error handling page. Refer: <a href=""https://aka.ms/tmtxmgmt#default"">https://aka.ms/tmtxmgmt#default</a>  Set Deployment Method to Retail in IIS. Refer: <a href=""https://aka.ms/tmtxmgmt#deployment"">https://aka.ms/tmtxmgmt#deployment</a>  Use only approved symmetric block ciphers and key lengths. Refer: <a href=""https://aka.ms/tmtcrypto#cipher-length"">https://aka.ms/tmtcrypto#cipher-length</a>  Use approved block cipher modes and initialization vectors for symmetric ciphers. Refer: <a href=""https://aka.ms/tmtcrypto#vector-ciphers"">https://aka.ms/tmtcrypto#vector-ciphers</a>  Use approved asymmetric algorithms, key lengths, and padding. Refer: <a href=""https://aka.ms/tmtcrypto#padding"">https://aka.ms/tmtcrypto#padding</a>  Use approved random number generators. Refer: <a href=""https://aka.ms/tmtcrypto#numgen"">https://aka.ms/tmtcrypto#numgen</a>  Do not use symmetric stream ciphers. Refer: <a href=""https://aka.ms/tmtcrypto#stream-ciphers"">https://aka.ms/tmtcrypto#stream-ciphers</a>  Use approved MAC/HMAC/keyed hash algorithms. Refer: <a href=""https://aka.ms/tmtcrypto#mac-hash"">https://aka.ms/tmtcrypto#mac-hash</a>  Use only approved cryptographic hash functions. Refer: <a href=""https://aka.ms/tmtcrypto#hash-functions"">https://aka.ms/tmtcrypto#hash-functions</a>  Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>",Implementation
79,An adversary may leverage the lack of monitoring systems and trigger anomalous traffic to database,Tampering,Diagram 1,Get Student Info,High,Not Started,,An adversary may leverage the lack of intrusion detection and prevention  of anomalous database activities and  trigger anomalous traffic to database,,Generated,"Enable Threat detection on Azure SQL database. Refer: <a href=""https://aka.ms/tmtauditlog#threat-detection"">https://aka.ms/tmtauditlog#threat-detection</a>",Design
78,An adversary can tamper critical database securables and deny the action,Tampering,Diagram 1,Get Student Info,High,Not Started,,An adversary can tamper critical database securables and deny the action,,Generated,"Add digital signature to critical database securables. Refer: <a href=""https://aka.ms/tmtcrypto#securables-db"">https://aka.ms/tmtcrypto#securables-db</a>",Design
77,An adversary can deny actions on database due to lack of auditing,Repudiation,Diagram 1,Get Student Info,Medium,Not Started,,"Proper logging of all security events and user actions builds traceability in a system and denies any possible repudiation issues. In the absence of proper auditing and logging controls, it would become impossible to implement any accountability in a system.",,Generated,"Ensure that login auditing is enabled on SQL Server. Refer: <a href=""https://aka.ms/tmtauditlog#identify-sensitive-entities"">https://aka.ms/tmtauditlog#identify-sensitive-entities</a>",Implementation
76,An adversary can gain access to sensitive data by performing SQL injection,Information Disclosure,Diagram 1,Get Student Info,High,Not Started,,"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. The primary form of SQL injection consists of direct insertion of code into user-input variables that are concatenated with SQL commands and executed. A less direct attack injects malicious code into strings that are destined for storage in a table or as metadata. When the stored strings are subsequently concatenated into a dynamic SQL command, the malicious code is executed. ",,Generated,"Ensure that login auditing is enabled on SQL Server. Refer: <a href=""https://aka.ms/tmtauditlog#identify-sensitive-entities"">https://aka.ms/tmtauditlog#identify-sensitive-entities</a>  Ensure that least-privileged accounts are used to connect to Database server. Refer: <a href=""https://aka.ms/tmtauthz#privileged-server"">https://aka.ms/tmtauthz#privileged-server</a>  Enable Threat detection on Azure SQL database. Refer: <a href=""https://aka.ms/tmtauditlog#threat-detection"">https://aka.ms/tmtauditlog#threat-detection</a>  Do not use dynamic queries in stored procedures. Refer: <a href=""https://aka.ms/tmtinputval#stored-proc"">https://aka.ms/tmtinputval#stored-proc</a>",Implementation
75,An adversary can gain access to sensitive PII or HBI data in database,Information Disclosure,Diagram 1,Get Student Info,High,Not Started,,"Additional controls like Transparent Data Encryption, Column Level Encryption, EKM etc. provide additional protection mechanism to high value PII or HBI data. ",,Generated,"Use strong encryption algorithms to encrypt data in the database. Refer: <a href=""https://aka.ms/tmtcrypto#strong-db"">https://aka.ms/tmtcrypto#strong-db</a>  Ensure that sensitive data in database columns is encrypted. Refer: <a href=""https://aka.ms/tmtdata#db-encrypted"">https://aka.ms/tmtdata#db-encrypted</a>  Ensure that database-level encryption (TDE) is enabled. Refer: <a href=""https://aka.ms/tmtdata#tde-enabled"">https://aka.ms/tmtdata#tde-enabled</a>  Ensure that database backups are encrypted. Refer: <a href=""https://aka.ms/tmtdata#backup"">https://aka.ms/tmtdata#backup</a>  Use SQL server EKM to protect encryption keys. Refer: <a href=""https://aka.ms/tmtcrypto#ekm-keys"">https://aka.ms/tmtcrypto#ekm-keys</a>  Use AlwaysEncrypted feature if encryption keys should not be revealed to Database engine. Refer: <a href=""https://aka.ms/tmtcrypto#keys-engine"">https://aka.ms/tmtcrypto#keys-engine</a>",Implementation
74,An adversary can gain access to sensitive data by sniffing traffic to database,Information Disclosure,Diagram 1,Get Student Info,High,Not Started,,"An adversary can eaves drop on communication between application server and StudentDB  server, due to clear text communication protocol usage.",,Generated,"Ensure SQL server connection encryption and certificate validation. Refer: <a href=""https://aka.ms/tmtcommsec#sqlserver-validation"">https://aka.ms/tmtcommsec#sqlserver-validation</a>  Force Encrypted communication to SQL server. Refer: <a href=""https://aka.ms/tmtcommsec#encrypted-sqlserver"">https://aka.ms/tmtcommsec#encrypted-sqlserver</a>",Implementation
73,An adversary can gain unauthorized access to database due to loose authorization rules,Elevation of Privileges,Diagram 1,Get Student Info,High,Not Started,,"Database access should be configured with roles and privilege based on least privilege and need to know principle. ",,Generated,"Ensure that least-privileged accounts are used to connect to Database server. Refer: <a href=""https://aka.ms/tmtauthz#privileged-server"">https://aka.ms/tmtauthz#privileged-server</a>  Implement Row Level Security RLS to prevent tenants from accessing each others data. Refer: <a href=""https://aka.ms/tmtauthz#rls-tenants"">https://aka.ms/tmtauthz#rls-tenants</a>  Sysadmin role should only have valid necessary users . Refer: <a href=""https://aka.ms/tmtauthz#sysadmin-users"">https://aka.ms/tmtauthz#sysadmin-users</a>",Implementation
72,An adversary can gain unauthorized access to database due to lack of network access protection,Elevation of Privileges,Diagram 1,Get Student Info,High,Not Started,,"If there is no restriction at network or host firewall level, to access the database then anyone can attempt to connect to the database from an unauthorized location",,Generated,"Configure a Windows Firewall for Database Engine Access. Refer: <a href=""https://aka.ms/tmtconfigmgmt#firewall-db"">https://aka.ms/tmtconfigmgmt#firewall-db</a>",Implementation
71,An adversary can gain access to sensitive data stored in Web App's config files,Tampering,Diagram 1,Verify Credentials,High,Not Started,,"An adversary can gain access to the config files. and if sensitive data is stored in it, it would be compromised.",,Generated,"Encrypt sections of Web App's configuration files that contain sensitive data. Refer: <a href=""https://aka.ms/tmtdata#encrypt-data"">https://aka.ms/tmtdata#encrypt-data</a>",Implementation
70,An adversary can gain access to sensitive data by performing SQL injection through Web App,Tampering,Diagram 1,Verify Credentials,High,Not Started,,"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. The primary form of SQL injection consists of direct insertion of code into user-input variables that are concatenated with SQL commands and executed. A less direct attack injects malicious code into strings that are destined for storage in a table or as metadata. When the stored strings are subsequently concatenated into a dynamic SQL command, the malicious code is executed. ",,Generated,"Ensure that type-safe parameters are used in Web Application for data access. Refer: <a href=""https://aka.ms/tmtinputval#typesafe"">https://aka.ms/tmtinputval#typesafe</a>",Implementation
69,An adversary may spoof Login Module and gain access to Web Application,Spoofing,Diagram 1,Verify Credentials,High,Not Started,,"If proper authentication is not in place, an adversary can spoof a source process or external entity and gain unauthorized access to the Web Application",,Generated,"Consider using a standard authentication mechanism to authenticate to Web Application. Refer: <a href=""https://aka.ms/tmtauthn#standard-authn-web-app"">https://aka.ms/tmtauthn#standard-authn-web-app</a>",Design
68,An adversary can create a fake website and launch phishing attacks,Spoofing,Diagram 1,Verify Credentials,High,Not Started,,"Phishing is attempted to obtain sensitive information such as usernames, passwords, and credit card details (and sometimes, indirectly, money), often for malicious reasons, by masquerading as a Web Server which is a trustworthy entity in electronic communication",,Generated,"Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>  Ensure that authenticated ASP.NET pages incorporate UI Redressing or clickjacking defences. Refer: <a href=""https://aka.ms/tmtconfigmgmt#ui-defenses"">https://aka.ms/tmtconfigmgmt#ui-defenses</a>  Validate all redirects within the application are closed or done safely. Refer: <a href=""https://aka.ms/tmtinputval#redirect-safe"">https://aka.ms/tmtinputval#redirect-safe</a>",Implementation
67,An adversary can steal sensitive data like user credentials,Spoofing,Diagram 1,Verify Credentials,High,Not Started,,"Attackers can exploit weaknesses in system to steal user credentials. Downstream and upstream components are often accessed by using credentials stored in configuration stores. Attackers may steal the upstream or downstream component credentials. Attackers may steal credentials if, Credentials are stored and sent in clear text, Weak input validation coupled with dynamic sql queries, Password retrieval mechanism are poor,  ",,Generated,"Explicitly disable the autocomplete HTML attribute in sensitive forms and inputs. Refer: <a href=""https://aka.ms/tmtdata#autocomplete-input"">https://aka.ms/tmtdata#autocomplete-input</a>  Perform input validation and filtering on all string type Model properties. Refer: <a href=""https://aka.ms/tmtinputval#typemodel"">https://aka.ms/tmtinputval#typemodel</a>  Validate all redirects within the application are closed or done safely. Refer: <a href=""https://aka.ms/tmtinputval#redirect-safe"">https://aka.ms/tmtinputval#redirect-safe</a>  Enable step up or adaptive authentication. Refer: <a href=""https://aka.ms/tmtauthn#step-up-adaptive-authn"">https://aka.ms/tmtauthn#step-up-adaptive-authn</a>  Implement forgot password functionalities securely. Refer: <a href=""https://aka.ms/tmtauthn#forgot-pword-fxn"">https://aka.ms/tmtauthn#forgot-pword-fxn</a>  Ensure that password and account policy are implemented. Refer: <a href=""https://aka.ms/tmtauthn#pword-account-policy"">https://aka.ms/tmtauthn#pword-account-policy</a>  Implement input validation on all string type parameters accepted by Controller methods. Refer: <a href=""https://aka.ms/tmtinputval#string-method"">https://aka.ms/tmtinputval#string-method</a>",Implementation
66,An adversary can spoof the target web application due to insecure TLS certificate configuration,Spoofing,Diagram 1,Verify Credentials,High,Not Started,,Ensure that TLS certificate parameters are configured with correct values,,Generated,"Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>",Implementation
65,Attacker can deny the malicious act and remove the attack foot prints leading to repudiation issues,Repudiation,Diagram 1,Verify Credentials,Medium,Not Started,,"Proper logging of all security events and user actions builds traceability in a system and denies any possible repudiation issues. In the absence of proper auditing and logging controls, it would become impossible to implement any accountability in a system",,Generated,"Ensure that auditing and logging is enforced on the application. Refer: <a href=""https://aka.ms/tmtauditlog#auditing"">https://aka.ms/tmtauditlog#auditing</a>  Ensure that log rotation and separation are in place. Refer: <a href=""https://aka.ms/tmtauditlog#log-rotation"">https://aka.ms/tmtauditlog#log-rotation</a>  Ensure that Audit and Log Files have Restricted Access. Refer: <a href=""https://aka.ms/tmtauditlog#log-restricted-access"">https://aka.ms/tmtauditlog#log-restricted-access</a>  Ensure that User Management Events are Logged. Refer: <a href=""https://aka.ms/tmtauditlog#user-management"">https://aka.ms/tmtauditlog#user-management</a>",Implementation
64,An adversary can gain access to sensitive information through error messages,Information Disclosure,Diagram 1,Verify Credentials,High,Not Started,,"An adversary can gain access to sensitive data such as the following, through verbose error messages - Server names  - Connection strings  - Usernames  - Passwords  - SQL procedures  - Details of dynamic SQL failures  - Stack trace and lines of code  - Variables stored in memory  - Drive and folder locations  - Application install points  - Host configuration settings  - Other internal application details ",,Generated,"Do not expose security details in error messages. Refer: <a href=""https://aka.ms/tmtxmgmt#messages"">https://aka.ms/tmtxmgmt#messages</a>  Implement Default error handling page. Refer: <a href=""https://aka.ms/tmtxmgmt#default"">https://aka.ms/tmtxmgmt#default</a>  Set Deployment Method to Retail in IIS. Refer: <a href=""https://aka.ms/tmtxmgmt#deployment"">https://aka.ms/tmtxmgmt#deployment</a>  Exceptions should fail safely. Refer: <a href=""https://aka.ms/tmtxmgmt#fail"">https://aka.ms/tmtxmgmt#fail</a>  ASP.NET applications must disable tracing and debugging prior to deployment. Refer: <a href=""https://aka.ms/tmtconfigmgmt#trace-deploy"">https://aka.ms/tmtconfigmgmt#trace-deploy</a>  Implement controls to prevent username enumeration. Refer: <a href=""https://aka.ms/tmtauthn#controls-username-enum"">https://aka.ms/tmtauthn#controls-username-enum</a>",Implementation
63,An adversary may gain access to sensitive data from log files,Information Disclosure,Diagram 1,Verify Credentials,High,Not Started,,An adversary may gain access to sensitive data from log files,,Generated,"Ensure that the application does not log sensitive user data. Refer: <a href=""https://aka.ms/tmtauditlog#log-sensitive-data"">https://aka.ms/tmtauditlog#log-sensitive-data</a>  Ensure that Audit and Log Files have Restricted Access. Refer: <a href=""https://aka.ms/tmtauditlog#log-restricted-access"">https://aka.ms/tmtauditlog#log-restricted-access</a>",Implementation
62,An adversary can reverse weakly encrypted or hashed content,Information Disclosure,Diagram 1,Verify Credentials,High,Not Started,,An adversary can reverse weakly encrypted or hashed content,,Generated,"Do not expose security details in error messages. Refer: <a href=""https://aka.ms/tmtxmgmt#messages"">https://aka.ms/tmtxmgmt#messages</a> Implement Default error handling page. Refer: <a href=""https://aka.ms/tmtxmgmt#default"">https://aka.ms/tmtxmgmt#default</a>  Set Deployment Method to Retail in IIS. Refer: <a href=""https://aka.ms/tmtxmgmt#deployment"">https://aka.ms/tmtxmgmt#deployment</a>  Use only approved symmetric block ciphers and key lengths. Refer: <a href=""https://aka.ms/tmtcrypto#cipher-length"">https://aka.ms/tmtcrypto#cipher-length</a>  Use approved block cipher modes and initialization vectors for symmetric ciphers. Refer: <a href=""https://aka.ms/tmtcrypto#vector-ciphers"">https://aka.ms/tmtcrypto#vector-ciphers</a>  Use approved asymmetric algorithms, key lengths, and padding. Refer: <a href=""https://aka.ms/tmtcrypto#padding"">https://aka.ms/tmtcrypto#padding</a>  Use approved random number generators. Refer: <a href=""https://aka.ms/tmtcrypto#numgen"">https://aka.ms/tmtcrypto#numgen</a>  Do not use symmetric stream ciphers. Refer: <a href=""https://aka.ms/tmtcrypto#stream-ciphers"">https://aka.ms/tmtcrypto#stream-ciphers</a>  Use approved MAC/HMAC/keyed hash algorithms. Refer: <a href=""https://aka.ms/tmtcrypto#mac-hash"">https://aka.ms/tmtcrypto#mac-hash</a>  Use only approved cryptographic hash functions. Refer: <a href=""https://aka.ms/tmtcrypto#hash-functions"">https://aka.ms/tmtcrypto#hash-functions</a>  Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>",Implementation
61,An adversary may be able to perform action(s) on behalf of another user due to lack of controls against cross domain requests,Spoofing,Diagram 1,Login Request,High,Not Started,,An adversary may be able to perform action(s) on behalf of another user due to lack of controls against cross domain requests,,Generated,"Ensure that authenticated pages incorporate UI Redressing or clickjacking defences. Refer: <a href=""https://aka.ms/tmt-th177a"">https://aka.ms/tmt-th177a</a>. Mitigate against Cross-Site Request Forgery (CSRF) attacks. Refer: <a href=""https://aka.ms/tmt-th177b"">https://aka.ms/tmt-th177b</a> and <a href=""https://aka.ms/tmt-th177c"">https://aka.ms/tmt-th177c</a>",Implementation
60,An adversary may perform action(s) on behalf of another user due to lack of controls against cross domain requests,Elevation of Privileges,Diagram 1,Login Request,High,Not Started,,An adversary may perform action(s) on behalf of another user due to lack of controls against cross domain requests,,Generated,"Ensure that only trusted origins are allowed if CORS is being used. Refer: <a href=""https://aka.ms/tmt-th176"">https://aka.ms/tmt-th176</a>",Implementation
59,An adversary can read sensitive data by sniffing or intercepting traffic to Login Module,Tampering,Diagram 1,Login Request,High,Not Started,,An adversary can read sensitive data by sniffing or intercepting traffic to Login Module,,Generated,"Configure SSL certificate for custom domain in Azure App Service. Force all HTTP traffic to the app service to be over HTTPS by enabling the HTTPS only option on the instance. Refer: <a href=""https://aka.ms/tmt-th175a"">https://aka.ms/tmt-th175a</a> and <a href=""https://aka.ms/tmt-th175b"">https://aka.ms/tmt-th175b</a>. Enable HTTP Strict Transport Security (HSTS). Refer: <a href=""https://aka.ms/tmt-th175c"">https://aka.ms/tmt-th175c</a>",Implementation
58,An adversary can fingerprint an Azure web application or API by leveraging server header information,Information Disclosure,Diagram 1,Login Request,Medium,Not Started,,An adversary can fingerprint an Azure web application or API by leveraging server header information,,Generated,"Remove standard server headers to avoid fingerprinting. Refer: <a href=""https://aka.ms/tmt-th174a"">https://aka.ms/tmt-th174a</a> and <a href=""https://aka.ms/tmt-th174b"">https://aka.ms/tmt-th174b</a>",Implementation
57,"An adversary can deny performing actions against Login Module due to lack of auditing, leading to repudiation issues",Repudiation,Diagram 1,Login Request,Medium,Not Started,,"An adversary can deny performing actions against Login Module due to lack of auditing, leading to repudiation issues",,Generated,"Implement application level auditing and logging, especially for sensitive operations, like accessing secrets from secrets storage solutions. Other examples include user management events like successful and failed user logins, password resets, password changes, account lockouts and user registrations.",Implementation
56,Attacker can steal user session cookies due to insecure cookie attributes,Information Disclosure,Diagram 1,Login Request,High,Not Started,,Attacker can steal user session cookies due to insecure cookie attributes,,Generated,"Applications available over HTTPS must use secure cookies. Refer: <a href=""https://aka.ms/tmt-th170a"">https://aka.ms/tmt-th170a</a>. All HTTP based applications should specify http only for cookie definition. Refer: <a href=""https://aka.ms/tmt-th170b"">https://aka.ms/tmt-th170b</a> and <a href=""https://aka.ms/tmt-th170c"">https://aka.ms/tmt-th170c</a>",Implementation
55,An adversary may gain unauthorized access to Login Module due to weak network configuration,Elevation of Privileges,Diagram 1,Login Request,High,Not Started,,An adversary may gain unauthorized access to Login Module due to weak network configuration,,Generated,"Restrict access to Azure App Service to selected networks (e.g. IP whitelisting, VNET integrations). Refer: <a href=""https://aka.ms/tmt-th167"">https://aka.ms/tmt-th167</a>",Implementation
54,An adversary may gain long term persistent access to related resources through the compromise of an application identity,Elevation of Privileges,Diagram 1,Login Request,High,Not Started,,An adversary may gain long term persistent access to related resources through the compromise of an application identity,,Generated,"Store secrets in secret storage solutions where possible, and rotate secrets on a regular cadence. Use Managed Service Identity to create a managed app identity on Azure Active Directory and use it to access AAD-protected resources. Refer: <a href=""https://aka.ms/tmt-th166"">https://aka.ms/tmt-th166</a>",Implementation
53,An adversary may block access to the application or API hosted on Login Module through a denial of service attack,Denial of Service,Diagram 1,Login Request,High,Not Started,,An adversary may block access to the application or API hosted on Login Module through a denial of service attack,,Generated,"Network level denial of service mitigations are automatically enabled as part of the Azure platform (Basic Azure DDoS Protection). Refer: <a href=""https://aka.ms/tmt-th165a"">https://aka.ms/tmt-th165a</a>. Implement application level throttling (e.g. per-user, per-session, per-API) to maintain service availability and protect against DoS attacks. Leverage Azure API Management for managing and protecting APIs. Refer: <a href=""https://aka.ms/tmt-th165b"">https://aka.ms/tmt-th165b</a>. General throttling guidance, refer: <a href=""https://aka.ms/tmt-th165c"">https://aka.ms/tmt-th165c</a> ",Implementation
106,An adversary can gain unauthorized access to resources in an Azure subscription,Elevation of Privileges,Diagram 1,Verify Credentials,High,Not Started,,"An adversary can gain unauthorized access to resources in Azure subscription. The adversary can be either a disgruntled internal user, or someone who has stolen the credentials of an Azure subscription.",,Generated,"Enable fine-grained access management to Azure Subscription using RBAC. Refer: <a href=""https://aka.ms/tmtauthz#grained-rbac"">https://aka.ms/tmtauthz#grained-rbac</a>",Design
107,An adversary may spoof an Azure administrator and gain access to Azure subscription portal,Spoofing,Diagram 1,Verify Credentials,High,Not Started,,An adversary may spoof an Azure administrator and gain access to Azure subscription portal if the administrator's credentials are compromised.,,Generated,"Enable fine-grained access management to Azure Subscription using RBAC. Refer: <a href=""https://aka.ms/tmtauthz#grained-rbac"">https://aka.ms/tmtauthz#grained-rbac</a>  Enable Azure Multi-Factor Authentication for Azure Administrators. Refer: <a href=""https://aka.ms/tmtauthn#multi-factor-azure-admin"">https://aka.ms/tmtauthn#multi-factor-azure-admin</a>",Design
108,An adversary can gain unauthorized access to resources in an Azure subscription,Elevation of Privileges,Diagram 1,Return Grades and Courses,High,Not Started,,"An adversary can gain unauthorized access to resources in Azure subscription. The adversary can be either a disgruntled internal user, or someone who has stolen the credentials of an Azure subscription.",,Generated,"Enable fine-grained access management to Azure Subscription using RBAC. Refer: <a href=""https://aka.ms/tmtauthz#grained-rbac"">https://aka.ms/tmtauthz#grained-rbac</a>",Design
109,An adversary may spoof an Azure administrator and gain access to Azure subscription portal,Spoofing,Diagram 1,Return Grades and Courses,High,Not Started,,An adversary may spoof an Azure administrator and gain access to Azure subscription portal if the administrator's credentials are compromised.,,Generated,"Enable fine-grained access management to Azure Subscription using RBAC. Refer: <a href=""https://aka.ms/tmtauthz#grained-rbac"">https://aka.ms/tmtauthz#grained-rbac</a>  Enable Azure Multi-Factor Authentication for Azure Administrators. Refer: <a href=""https://aka.ms/tmtauthn#multi-factor-azure-admin"">https://aka.ms/tmtauthn#multi-factor-azure-admin</a>",Design
110,An adversary can gain unauthorized access to resources in an Azure subscription,Elevation of Privileges,Diagram 1,Update Marks,High,Not Started,,"An adversary can gain unauthorized access to resources in Azure subscription. The adversary can be either a disgruntled internal user, or someone who has stolen the credentials of an Azure subscription.",,Generated,"Enable fine-grained access management to Azure Subscription using RBAC. Refer: <a href=""https://aka.ms/tmtauthz#grained-rbac"">https://aka.ms/tmtauthz#grained-rbac</a>",Design
111,An adversary may spoof an Azure administrator and gain access to Azure subscription portal,Spoofing,Diagram 1,Update Marks,High,Not Started,,An adversary may spoof an Azure administrator and gain access to Azure subscription portal if the administrator's credentials are compromised.,,Generated,"Enable fine-grained access management to Azure Subscription using RBAC. Refer: <a href=""https://aka.ms/tmtauthz#grained-rbac"">https://aka.ms/tmtauthz#grained-rbac</a>  Enable Azure Multi-Factor Authentication for Azure Administrators. Refer: <a href=""https://aka.ms/tmtauthn#multi-factor-azure-admin"">https://aka.ms/tmtauthn#multi-factor-azure-admin</a>",Design
